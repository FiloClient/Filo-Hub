-- Roblox Aimbot Script with GUI and Aimbot Logic

-- GUI Setup
local gui = Instance.new("ScreenGui")
gui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local toggleButton = Instance.new("TextButton")
toggleButton.Text = "Aimbot: OFF"
toggleButton.Size = UDim2.new(0, 200, 0, 50)
toggleButton.Position = UDim2.new(0.5, -100, 0.5, -25)
toggleButton.Parent = gui

local aimbotEnabled = false

-- Function to toggle aimbot
local function toggleAimbot()
    aimbotEnabled = not aimbotEnabled
    toggleButton.Text = aimbotEnabled and "Aimbot: ON" or "Aimbot: OFF"
end

toggleButton.MouseButton1Click:Connect(toggleAimbot)

--Logic
game:GetService("RunService").Stepped:Connect(function()
    if aimbotEnabled then
        local players = game.Players:GetPlayers()
        local closestPlayer = nil
        local shortestDistance = math.huge
        local playerPos = game.Players.LocalPlayer.Character.HumanoidRootPart.Position

        for i, player in ipairs(players) do
            if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local dist = (player.Character.HumanoidRootPart.Position - playerPos).Magnitude
                if dist < shortestDistance then
                    shortestDistance = dist
                    closestPlayer = player
                end
            end
        end

        if closestPlayer then
            -- Calculate direction vector towards closest player
            local direction = (closestPlayer.Character.HumanoidRootPart.Position - playerPos).unit

            -- Calculate look vector (up direction) for camera orientation
            local lookVector = Vector3.new(0, 1, 0)

            -- Calculate rotation between look vector and direction
            local rotation = CFrame.new(Vector3.new(), direction) - CFrame.new(Vector3.new(), lookVector)

            -- Rotate camera by rotation
            game:GetService("Workspace").CurrentCamera.CFrame = game:GetService("Workspace").CurrentCamera.CFrame * rotation
        end
    end
end)
